//
//  main.swift
//  swift-country
//
//   data come from https://raw.githubusercontent.com/lukes/ISO-3166-Countries-with-Regional-Codes/master/all/all.csv
//        added label colun

import Foundation

// You can write an extension block to add custom methods to structures generated by insrcdata
extension Region {
  //  an implementation that use getters defined by insrcdata
  func in_eurasia() -> Bool {
    let code = self.code
    return code == 142 || code == 150  // asia or europe
  }
}

// This function will print some information from a country
func print(country: Country) {
  //  countries may not have subregion(see ANTARTICA), so the field is optional
  if let subregion = country.subregion {
    print(
      " \(country.name) ( ISO 3166‑1: \(country.alpha3) ) in  \(subregion.name) from \(subregion.region.name)"
    )
  } else {
    print(" \(country.name) ( ISO 3166‑1: \(country.alpha3) ) has no subregion")
  }
}

func demo() {
  // row access by label
  let belgium = Country(ref: COUNTRIES_BELGIUM)

  // we can access data members
  print("\n  infos for \(belgium.name)")
  // and  pass the row reference to a function
  print(country: belgium)

  print("\n  info for a country without subregion")
  let antartica = Country(ref: COUNTRIES_ANTARCTICA)
  print(country: antartica)

  print("\n  all countries with  alpha3 code starting by 'F'")
  for country in Country.alpha3Range(start: "F", stop: "G") {
    print(country: country)
  }

  print("\n  country with UNO code  136")
  for country in Country.codeRange(start: 136, stop: 136) {
    print(country: country)
  }

  print("\n  all countries with UNO code  in the range [100..112] ")
  for country in Country.codeRange(start: 100, stop: 112) {
    print(country: country)
  }

  print("\n  all countries in Western Europe")
  let west_europe = belgium.subregion!
  for country in west_europe.countries {
    print(country: country)
  }

  print("\n  all subregions in  europe")
  let europe = west_europe.region
  for subregion in europe.subregions {
    print("\(subregion.name) ( code : \(subregion.code)  )")
  }

  print("\n  the first 5 countries of the table")
  for i in 0..<5 {
    let country = Country(index: i)
    print(country: country)
  }

  print()
}

// start of non regression tests
// the code that follow this point is not intended to be used as sample
// and may be more difficult to read (but should still be correct)

//  lookup by code
func alpha3_country(_ code: String) -> Country? {
  var iter = Country.alpha3Range(start: code, stop: code)
  return iter.next()
}

func test_sdn_sgp(_ start: String, _ stop: String) {
  let codes = Country.alpha3Range(start: start, stop: stop).map { $0.alpha3 }
  assert(codes == ["SDN", "SEN", "SGP"])
}

func test() {
  let belgium = Country(ref: COUNTRIES_BELGIUM)
  assert(belgium.name == "Belgium")
  assert(belgium.alpha3 == "BEL")
  assert(belgium.alpha2 == "BE")
  assert(belgium.code == 56)

  let west_europe = belgium.subregion!
  let europe = west_europe.region
  assert(europe.in_eurasia())

  let benin = alpha3_country("BEN")!
  let subsahara = benin.subregion!
  assert(subsahara.code == 202)
  let africa = subsahara.region
  assert(africa.code == 2)
  assert(!africa.in_eurasia())

  // equality
  assert(belgium.countries == COUNTRIES_BELGIUM)
  assert(benin.countries != COUNTRIES_ANTARCTICA)

  // check reverse join 0..1
  var benin_in_subsahara = false
  for country in subsahara.countries {
    if country.code == benin.code {
      benin_in_subsahara = true
    }
  }
  assert(benin_in_subsahara)

  // check reverse join 1..1
  var subsahara_in_africa = false
  for subregion in africa.subregions {
    if subregion.code == subsahara.code {
      subsahara_in_africa = true
    }
  }
  assert(subsahara_in_africa)

  //  lookup by code
  let france = alpha3_country("FRA")!
  assert(france.name == "France")
  let unknown = alpha3_country("XYZ")
  assert(unknown == nil)

  // test open and closed iter range
  test_sdn_sgp("SDN", "SGP")
  test_sdn_sgp("SDM", "SGP")
  test_sdn_sgp("SDN", "SGQ")
  test_sdn_sgp("SDM", "SGQ")
}

demo()
test()
