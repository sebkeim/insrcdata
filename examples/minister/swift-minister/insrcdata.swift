// generated by insrcdata version 0.3.0
import Foundation

public struct Minister : Hashable {
        var cstruct : UnsafePointer<minister_t>
    
    init(cstruct: UnsafePointer<minister_t>){
        self.cstruct = cstruct
    }
    init(ref:ministers_t){
        cstruct = minister_from_ministers(ref)
    }
    var ministers: ministers_t { minister_ministers(cstruct) }
    var name: String { String(cString:  minister_name(cstruct)) }
    var birth: UInt16 {  minister_birth(cstruct) }
    static func birthRange(start:UInt16, stop:UInt16) -> minister_iter_t {
        minister_birth_range(start, stop) 
    }
    var country : Country { Country(cstruct:minister_country(cstruct)) }

} // struct Minister

extension minister_iter_t : Sequence, IteratorProtocol {
        public typealias Element = Minister
        public mutating func next() -> Minister? {
            if let ptr = minister_next(&self) {
                return Minister(cstruct:ptr)
            }
            return nil
        }
}


public struct Country : Hashable {
        var cstruct : UnsafePointer<country_t>
    
    init(cstruct: UnsafePointer<country_t>){
        self.cstruct = cstruct
    }
    init(ref:countries_t){
        cstruct = country_from_countries(ref)
    }
    var countries: countries_t { country_countries(cstruct) }
    var code: String { String(cString:  country_code(cstruct)) }
    var name: String { String(cString:  country_name(cstruct)) }
    var ministers:minister_iter_t { country_ministers(cstruct) }

} // struct Country

extension country_iter_t : Sequence, IteratorProtocol {
        public typealias Element = Country
        public mutating func next() -> Country? {
            if let ptr = country_next(&self) {
                return Country(cstruct:ptr)
            }
            return nil
        }
}


