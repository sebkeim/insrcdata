// generated by insrcdata version 0.1.0

#![allow(dead_code)]
#![allow(unused_variables)]
pub struct HelloWorld {
    sentence_ : &'static str,
}
impl PartialEq<Self> for HelloWorld {
    fn eq(&self, other: &Self) -> bool {
        std::ptr::eq(self, other)
    }
}
impl Eq for HelloWorld {}
impl std::hash::Hash for HelloWorld {
    fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
        hello_world::index_of(self).hash(state);
    }
}

impl HelloWorld {
    pub fn sentence(&self) -> &'static str { self.sentence_ }
    pub fn array() -> &'static [HelloWorld; 2] { &hello_world::TABLE }
    pub fn as_index(&self) -> usize { hello_world::index_of(self) }
}

mod hello_world {

pub fn index_of(fic:&super::HelloWorld) -> usize {
    ((fic  as *const _ as usize) - (&TABLE[0]  as *const _ as usize)) / std::mem::size_of::<super::HelloWorld>()
}
const fn r(sentence:&'static str, ) -> super::HelloWorld {
    super::HelloWorld{sentence_:sentence, }
}

pub static TABLE : [ super::HelloWorld ; 2 ] = [
   {r("Hello", )},
   {r("World !", )},
];

} // mod hello_world

