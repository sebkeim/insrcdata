// generated by insrcdata version 0.1.0

#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]
pub enum Labels {
    Foo = 0,
    Bar = 1,
    UpperCamelCase = 2,
    LowerCamelCase = 3,
    SnakeCase = 4,
    KebabCase = 5,
    ShoutySnakeCase = 6,
    TitleCase = 7,
    ShoutyKebabCase = 8,
    TrainCase = 9,
}
impl From<Labels> for  &'static Label{
    fn from(value:Labels) -> Self {
        &label::TABLE[value as usize]
    }
}
impl From<&Labels> for  &'static Label{
    fn from(value: &Labels) -> Self {
        &label::TABLE[*value as usize]
    }
}
impl PartialEq<Labels> for &Label {
    fn eq(&self, other: &Labels) -> bool {
        std::ptr::eq(<&Label>::from(other), *self)
    }
}

pub struct Label {
    title_ : &'static str,
    as_label_ : Labels,
}
impl PartialEq<Self> for Label {
    fn eq(&self, other: &Self) -> bool {
        std::ptr::eq(self, other)
    }
}
impl Eq for Label {}
impl std::hash::Hash for Label {
    fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
        label::index_of(self).hash(state);
    }
}

impl Label {
    pub fn title(&self) -> &'static str { self.title_ }
    pub fn as_label(&self) -> &Labels { &self.as_label_}
    pub fn array() -> &'static [Label; 10] { &label::TABLE }
    pub fn as_index(&self) -> usize { label::index_of(self) }
}

mod label {use super::*;

pub fn index_of(fic:&Label) -> usize {
    ((fic  as *const _ as usize) - (&TABLE[0]  as *const _ as usize)) / std::mem::size_of::<Label>()
}
const fn r(title:&'static str, as_label:Labels, ) -> Label {
    Label{title_:title, as_label_:as_label, }
}

pub static TABLE : [ Label ; 10 ] = [
   {r("FOO", Labels::Foo, )},
   {r("BAR", Labels::Bar, )},
   {r("UpperCamelCase", Labels::UpperCamelCase, )},
   {r("lowerCamelCase", Labels::LowerCamelCase, )},
   {r("snake_case", Labels::SnakeCase, )},
   {r("kebab-case", Labels::KebabCase, )},
   {r("SHOUTY_SNAKE_CASE", Labels::ShoutySnakeCase, )},
   {r("Title Case", Labels::TitleCase, )},
   {r("SHOUTY-KEBAB-CASE", Labels::ShoutyKebabCase, )},
   {r("Train-Case", Labels::TrainCase, )},
];

} // mod label

