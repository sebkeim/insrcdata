// generated by insrcdata version 0.3.0
import Foundation

public struct Adhoc : Hashable {
        var cstruct : UnsafePointer<adhoc_t>
    
    init(cstruct: UnsafePointer<adhoc_t>){
        self.cstruct = cstruct
    }
    init(ref:adhocs_t){
        cstruct = adhoc_from_adhocs(ref)
    }
    var adhocs: adhocs_t { adhoc_adhocs(cstruct) }
    var score_data: Float32 {  adhoc_score_data(cstruct) }
    var count_data: UInt16 {  adhoc_count_data(cstruct) }

} // struct Adhoc



public struct Score : Hashable {
        var cstruct : UnsafePointer<score_t>
    
    var value: Float32 {  score_value(cstruct) }

} // struct Score



public struct Count : Hashable {
        var cstruct : UnsafePointer<count_t>
    
    var value: UInt16 {  count_value(cstruct) }

} // struct Count



public struct Optjoin : Hashable {
        var cstruct : UnsafePointer<optjoin_t>
    
    init(cstruct: UnsafePointer<optjoin_t>){
        self.cstruct = cstruct
    }
    init(ref:optjoins_t){
        cstruct = optjoin_from_optjoins(ref)
    }
    var optjoins: optjoins_t { optjoin_optjoins(cstruct) }
    var score_join : Score? {
        var p = UnsafePointer<score_t>?(nil)
        if optjoin_score_join(cstruct, &p) { return Score(cstruct:p!) } else { return nil }
    }
    var count_join : Count? {
        var p = UnsafePointer<count_t>?(nil)
        if optjoin_count_join(cstruct, &p) { return Count(cstruct:p!) } else { return nil }
    }

} // struct Optjoin



