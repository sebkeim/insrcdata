//
//  main.swift
//  swift-optionals
//
// there is curently no builtin support for optional values
// this sample show available strategies to handle optional values

// interface that will be implemented by strategies
protocol Optional {
  // optional getters from methods generated by insrcdata
  func score() -> Float32?
  func count() -> UInt16?
}

extension Optional {

  // output the content of a row with optional values
  func printto(name: String) {
    print(name)
    if let score = self.score() {
      print(" score=\(score)")
    }
    if let count = self.count() {
      print(" count=\(count)")
    }
    print()
  }
}

// optional join strategy use optional join tables to store the values
// this the most robust approach but has some drawbacks :
//  - data size may become larger, except if many duplicate values
//  - range indexing become unreasonably complicated

// implement optional getter from methods generated by insrcdata
extension Optjoin: Optional {
  // getter for optional f32 value
  func score() -> Float32? {
    self.score_join?.value
  }

  func count() -> UInt16? {
    self.count_join?.value
  }
}

//  optjoin strategy usage sample
print("    Optional join strategy")
Optjoin(ref: OPTJOINS_FILLED).printto(name: "Filled")
Optjoin(ref: OPTJOINS_EMPTY).printto(name: "Empty")

// ====================================================================================

//
// ad-hoc strategy use placeholder to represent 'no value'
//

// placeholder values that represent 'no value'
// we must be certain that theses values will never be needed for real data
let SCORE_EMPTY: Float32 = -1.0
let COUNT_EMPTY: UInt16 = 0

// implement optional getter from methods generated by insrcdata
extension Adhoc: Optional {
  // getter for optional f32 value
  func score() -> Float32? {
    let v = self.score_data
    return v == SCORE_EMPTY ? nil : v
  }

  // getter for optional u16 value
  func count() -> UInt16? {
    let v = self.count_data
    return v == COUNT_EMPTY ? nil : v
  }
}

//  ad-hoc strategy usage sample
print("    Adhoc strategy")
Adhoc(ref: ADHOCS_FILLED).printto(name: "Filled")
Adhoc(ref: ADHOCS_EMPTY).printto(name: "Empty")
