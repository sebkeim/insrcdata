// generated by insrcdata version 0.2.0

#ifndef INSRCDATA_INSRCDATA_H
#define INSRCDATA_INSRCDATA_H
#include <stddef.h>
#include <stdint.h>
#include <stdbool.h>

typedef struct  {
    float score_data_;
    uint8_t count_data_;
} adhoc_t;

typedef struct  {
    float value_;
} score_t;

typedef struct  {
    uint8_t value_;
} count_t;

typedef struct  {
    uint8_t score_join_;
    uint8_t count_join_;
} optjoin_t;



// ------    
typedef enum {
     ADHOCS_FILLED = 0,
     ADHOCS_EMPTY = 1,
} adhocs_t;
const adhoc_t* adhoc_from_adhocs(adhocs_t label);
adhocs_t adhoc_adhocs(const adhoc_t *s);
            
static inline float adhoc_score_data(const adhoc_t* s) { return s->score_data_; }
static inline uint16_t adhoc_count_data(const adhoc_t* s) { return s->count_data_; }


// ------    
static inline float score_value(const score_t* s) { return s->value_; }


// ------    
static inline uint16_t count_value(const count_t* s) { return s->value_; }


// ------    
typedef enum {
     OPTJOINS_FILLED = 0,
     OPTJOINS_EMPTY = 1,
} optjoins_t;
const optjoin_t* optjoin_from_optjoins(optjoins_t label);
optjoins_t optjoin_optjoins(const optjoin_t *s);
            
extern bool optjoin_score_join(const optjoin_t* s, const score_t** ptr);
extern bool optjoin_count_join(const optjoin_t* s, const count_t** ptr);

#endif //  INSRCDATA_H 
