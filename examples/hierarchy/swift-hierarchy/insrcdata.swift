// generated by insrcdata version 0.3.0
import Foundation

public struct Leave : Hashable {
        var cstruct : UnsafePointer<leave_t>
    
    init(cstruct: UnsafePointer<leave_t>){
        self.cstruct = cstruct
    }
    init(index:Int){
        cstruct = LEAVE_TABLE_PTR()+index
    }
    var title: String { String(cString:  leave_title(cstruct)) }
    var chapter_code: String { String(cString:  leave_chapter_code(cstruct)) }
    var chapter : Chapter { Chapter(cstruct:leave_chapter(cstruct)) }

} // struct Leave

extension leave_iter_t : Sequence, IteratorProtocol {
        public typealias Element = Leave
        public mutating func next() -> Leave? {
            if let ptr = leave_next(&self) {
                return Leave(cstruct:ptr)
            }
            return nil
        }
}


public struct Chapter : Hashable {
        var cstruct : UnsafePointer<chapter_t>
    
    init(cstruct: UnsafePointer<chapter_t>){
        self.cstruct = cstruct
    }
    init(index:Int){
        cstruct = CHAPTER_TABLE_PTR()+index
    }
    var title: String { String(cString:  chapter_title(cstruct)) }
    var code: String { String(cString:  chapter_code(cstruct)) }
    static func codeRange(start:String, stop:String) -> chapter_iter_t {
        chapter_code_range(start.cString(using:.utf8), stop.cString(using:.utf8)) 
    }
    var parent : Chapter { Chapter(cstruct:chapter_parent(cstruct)) }
    var leaves:leave_iter_t { chapter_leaves(cstruct) }

} // struct Chapter

extension chapter_iter_t : Sequence, IteratorProtocol {
        public typealias Element = Chapter
        public mutating func next() -> Chapter? {
            if let ptr = chapter_next(&self) {
                return Chapter(cstruct:ptr)
            }
            return nil
        }
}


